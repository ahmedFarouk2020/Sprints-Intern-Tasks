
traffic_light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000004ac  00000520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000542  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000140  00000000  00000000  00000572  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000e0d  00000000  00000000  000006b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000053b  00000000  00000000  000014bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004ec  00000000  00000000  000019fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000234  00000000  00000000  00001ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000004a0  00000000  00000000  0000211c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000ca4  00000000  00000000  000025bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000e0  00000000  00000000  00003260  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ea       	ldi	r30, 0xAC	; 172
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 c6 01 	call	0x38c	; 0x38c <main>
  7a:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <App_Init>:
#include "UARTif.h"
#include "App.h"

void App_Init(void)
{
	UARTif_Init(UART0);
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	0e 94 2b 02 	call	0x456	; 0x456 <UARTif_Init>
	LED_Init(LED_0); // RED
  88:	60 e0       	ldi	r22, 0x00	; 0
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	0e 94 ba 01 	call	0x374	; 0x374 <LED_Init>
	LED_Init(LED_1); // GREEN
  90:	61 e0       	ldi	r22, 0x01	; 1
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	0e 94 ba 01 	call	0x374	; 0x374 <LED_Init>
	LED_Init(LED_2); // BLUE
  98:	62 e0       	ldi	r22, 0x02	; 2
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	0e 94 ba 01 	call	0x374	; 0x374 <LED_Init>
  a0:	08 95       	ret

000000a2 <App_SendCommand>:
}

uint8_t App_SendCommand(uint8_t *cmd)
{
	// uart send cmd
	UARTif_SendStr(UART0,cmd);
  a2:	bc 01       	movw	r22, r24
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	0e 94 3a 02 	call	0x474	; 0x474 <UARTif_SendStr>
	return 0;
}
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	08 95       	ret

000000ae <App_ReceiveCommand>:

uint8_t App_ReceiveCommand(uint8_t *cmd)
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	ec 01       	movw	r28, r24
	// uart receive cmd
	UARTif_ReceiveStr(UART0,cmd);
  b4:	bc 01       	movw	r22, r24
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	0e 94 40 02 	call	0x480	; 0x480 <UARTif_ReceiveStr>
	// process data
	if (strncmp(cmd,"START",5) == 0)
  bc:	45 e0       	ldi	r20, 0x05	; 5
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	60 e6       	ldi	r22, 0x60	; 96
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	ce 01       	movw	r24, r28
  c6:	0e 94 46 02 	call	0x48c	; 0x48c <strncmp>
  ca:	89 2b       	or	r24, r25
  cc:	e9 f0       	breq	.+58     	; 0x108 <App_ReceiveCommand+0x5a>
	{
		return START;
	}
	else if (strncmp(cmd,"WAIT",4) == 0)
  ce:	44 e0       	ldi	r20, 0x04	; 4
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	66 e6       	ldi	r22, 0x66	; 102
  d4:	70 e0       	ldi	r23, 0x00	; 0
  d6:	ce 01       	movw	r24, r28
  d8:	0e 94 46 02 	call	0x48c	; 0x48c <strncmp>
  dc:	89 2b       	or	r24, r25
  de:	b1 f0       	breq	.+44     	; 0x10c <App_ReceiveCommand+0x5e>
	{
		return WAIT;
	}
	else if (strncmp(cmd,"STOP",4) == 0)
  e0:	44 e0       	ldi	r20, 0x04	; 4
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	6b e6       	ldi	r22, 0x6B	; 107
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	ce 01       	movw	r24, r28
  ea:	0e 94 46 02 	call	0x48c	; 0x48c <strncmp>
  ee:	89 2b       	or	r24, r25
  f0:	79 f0       	breq	.+30     	; 0x110 <App_ReceiveCommand+0x62>
	{
		return STOP;
	}
	else if (strncmp(cmd,"AT",2) == 0)
  f2:	42 e0       	ldi	r20, 0x02	; 2
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	60 e7       	ldi	r22, 0x70	; 112
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	ce 01       	movw	r24, r28
  fc:	0e 94 46 02 	call	0x48c	; 0x48c <strncmp>
 100:	89 2b       	or	r24, r25
 102:	41 f4       	brne	.+16     	; 0x114 <App_ReceiveCommand+0x66>
	{
		return AT;
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	07 c0       	rjmp	.+14     	; 0x116 <App_ReceiveCommand+0x68>
	// uart receive cmd
	UARTif_ReceiveStr(UART0,cmd);
	// process data
	if (strncmp(cmd,"START",5) == 0)
	{
		return START;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	05 c0       	rjmp	.+10     	; 0x116 <App_ReceiveCommand+0x68>
	}
	else if (strncmp(cmd,"WAIT",4) == 0)
	{
		return WAIT;
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	03 c0       	rjmp	.+6      	; 0x116 <App_ReceiveCommand+0x68>
	}
	else if (strncmp(cmd,"STOP",4) == 0)
	{
		return STOP;
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	01 c0       	rjmp	.+2      	; 0x116 <App_ReceiveCommand+0x68>
	{
		return AT;
	}
	else
	{
		return 255;
 114:	8f ef       	ldi	r24, 0xFF	; 255
	}
	// return the Id of cmd
	
}
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <App_TakeAction>:

void App_TakeAction(uint8_t cmd_id)
{
	switch (cmd_id)
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	99 f0       	breq	.+38     	; 0x146 <App_TakeAction+0x2a>
 120:	28 f0       	brcs	.+10     	; 0x12c <App_TakeAction+0x10>
 122:	82 30       	cpi	r24, 0x02	; 2
 124:	e9 f0       	breq	.+58     	; 0x160 <App_TakeAction+0x44>
 126:	83 30       	cpi	r24, 0x03	; 3
 128:	41 f1       	breq	.+80     	; 0x17a <App_TakeAction+0x5e>
 12a:	2c c0       	rjmp	.+88     	; 0x184 <App_TakeAction+0x68>
	{
		case STOP:
			LED_TurnOn(LED_0);
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 be 01 	call	0x37c	; 0x37c <LED_TurnOn>
			LED_TurnOff(LED_1);
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0e 94 c2 01 	call	0x384	; 0x384 <LED_TurnOff>
			LED_TurnOff(LED_2);
 13c:	62 e0       	ldi	r22, 0x02	; 2
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 c2 01 	call	0x384	; 0x384 <LED_TurnOff>
			break;
 144:	08 95       	ret
			
		case START:
			LED_TurnOn(LED_1);
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	0e 94 be 01 	call	0x37c	; 0x37c <LED_TurnOn>
			LED_TurnOff(LED_0);
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	0e 94 c2 01 	call	0x384	; 0x384 <LED_TurnOff>
			LED_TurnOff(LED_2);
 156:	62 e0       	ldi	r22, 0x02	; 2
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	0e 94 c2 01 	call	0x384	; 0x384 <LED_TurnOff>
			break;
 15e:	08 95       	ret
			
		case WAIT:
			LED_TurnOn(LED_2);
 160:	62 e0       	ldi	r22, 0x02	; 2
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 be 01 	call	0x37c	; 0x37c <LED_TurnOn>
			LED_TurnOff(LED_1);
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 c2 01 	call	0x384	; 0x384 <LED_TurnOff>
			LED_TurnOff(LED_0);
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 c2 01 	call	0x384	; 0x384 <LED_TurnOff>
			break;
 178:	08 95       	ret
			
		case AT:
			App_SendCommand("\rOK\r");
 17a:	83 e7       	ldi	r24, 0x73	; 115
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 51 00 	call	0xa2	; 0xa2 <App_SendCommand>
			break;
 182:	08 95       	ret
			
		default:
			App_SendCommand("\rERROR!\r");
 184:	88 e7       	ldi	r24, 0x78	; 120
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 51 00 	call	0xa2	; 0xa2 <App_SendCommand>
 18c:	08 95       	ret

0000018e <DIO_setPinDirection>:
#include "DIO_private.h"
#include "DIO_config.h"

sint8_t DIO_setPinDirection(uint8_t GPIO, uint8_t pin_number, uint8_t direction)
{
	switch (GPIO)
 18e:	81 30       	cpi	r24, 0x01	; 1
 190:	c9 f0       	breq	.+50     	; 0x1c4 <DIO_setPinDirection+0x36>
 192:	28 f0       	brcs	.+10     	; 0x19e <DIO_setPinDirection+0x10>
 194:	82 30       	cpi	r24, 0x02	; 2
 196:	39 f1       	breq	.+78     	; 0x1e6 <DIO_setPinDirection+0x58>
 198:	83 30       	cpi	r24, 0x03	; 3
 19a:	b1 f1       	breq	.+108    	; 0x208 <DIO_setPinDirection+0x7a>
 19c:	46 c0       	rjmp	.+140    	; 0x22a <DIO_setPinDirection+0x9c>
	{
		case GPIOA:
			if (pin_number < 7) 
 19e:	67 30       	cpi	r22, 0x07	; 7
 1a0:	08 f0       	brcs	.+2      	; 0x1a4 <DIO_setPinDirection+0x16>
 1a2:	45 c0       	rjmp	.+138    	; 0x22e <DIO_setPinDirection+0xa0>
			{
				if (direction <= 1)
 1a4:	42 30       	cpi	r20, 0x02	; 2
 1a6:	08 f0       	brcs	.+2      	; 0x1aa <DIO_setPinDirection+0x1c>
 1a8:	44 c0       	rjmp	.+136    	; 0x232 <DIO_setPinDirection+0xa4>
				{
					PORTA_DDR |= (direction<< pin_number);
 1aa:	8a b3       	in	r24, 0x1a	; 26
 1ac:	50 e0       	ldi	r21, 0x00	; 0
 1ae:	9a 01       	movw	r18, r20
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_setPinDirection+0x28>
 1b2:	22 0f       	add	r18, r18
 1b4:	33 1f       	adc	r19, r19
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_setPinDirection+0x24>
 1ba:	b9 01       	movw	r22, r18
 1bc:	68 2b       	or	r22, r24
 1be:	6a bb       	out	0x1a, r22	; 26
					return NO_ERRORS; // no errors
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	08 95       	ret
				return INVALID_PIN_DIRECTION;
			}
		return PIN_NUMBER_OUT_OF_RANGE; 
		
		case GPIOB:
			if (pin_number < 7)
 1c4:	67 30       	cpi	r22, 0x07	; 7
 1c6:	b8 f5       	brcc	.+110    	; 0x236 <DIO_setPinDirection+0xa8>
			{
				if (direction <= 1)
 1c8:	42 30       	cpi	r20, 0x02	; 2
 1ca:	b8 f5       	brcc	.+110    	; 0x23a <DIO_setPinDirection+0xac>
				{
					PORTB_DDR |= (direction<< pin_number);
 1cc:	87 b3       	in	r24, 0x17	; 23
 1ce:	50 e0       	ldi	r21, 0x00	; 0
 1d0:	9a 01       	movw	r18, r20
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_setPinDirection+0x4a>
 1d4:	22 0f       	add	r18, r18
 1d6:	33 1f       	adc	r19, r19
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_setPinDirection+0x46>
 1dc:	b9 01       	movw	r22, r18
 1de:	68 2b       	or	r22, r24
 1e0:	67 bb       	out	0x17, r22	; 23
					return NO_ERRORS; // no errors
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	08 95       	ret
				return INVALID_PIN_DIRECTION;
			}
			return PIN_NUMBER_OUT_OF_RANGE; // Error
		
		case GPIOC:
			if (pin_number < 7)
 1e6:	67 30       	cpi	r22, 0x07	; 7
 1e8:	50 f5       	brcc	.+84     	; 0x23e <DIO_setPinDirection+0xb0>
			{
				if (direction <= 1)
 1ea:	42 30       	cpi	r20, 0x02	; 2
 1ec:	50 f5       	brcc	.+84     	; 0x242 <DIO_setPinDirection+0xb4>
				{
					PORTC_DDR |= (direction<< pin_number);
 1ee:	84 b3       	in	r24, 0x14	; 20
 1f0:	50 e0       	ldi	r21, 0x00	; 0
 1f2:	9a 01       	movw	r18, r20
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_setPinDirection+0x6c>
 1f6:	22 0f       	add	r18, r18
 1f8:	33 1f       	adc	r19, r19
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_setPinDirection+0x68>
 1fe:	b9 01       	movw	r22, r18
 200:	68 2b       	or	r22, r24
 202:	64 bb       	out	0x14, r22	; 20
					return NO_ERRORS; // no errors
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	08 95       	ret
				return INVALID_PIN_DIRECTION;
			}
			return PIN_NUMBER_OUT_OF_RANGE; // Error
		
		case GPIOD:
		if (pin_number < 7)
 208:	67 30       	cpi	r22, 0x07	; 7
 20a:	e8 f4       	brcc	.+58     	; 0x246 <DIO_setPinDirection+0xb8>
		{
			if (direction <= 1)
 20c:	42 30       	cpi	r20, 0x02	; 2
 20e:	e8 f4       	brcc	.+58     	; 0x24a <DIO_setPinDirection+0xbc>
			{
				PORTD_DDR |= (direction<< pin_number);
 210:	81 b3       	in	r24, 0x11	; 17
 212:	50 e0       	ldi	r21, 0x00	; 0
 214:	9a 01       	movw	r18, r20
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_setPinDirection+0x8e>
 218:	22 0f       	add	r18, r18
 21a:	33 1f       	adc	r19, r19
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_setPinDirection+0x8a>
 220:	b9 01       	movw	r22, r18
 222:	68 2b       	or	r22, r24
 224:	61 bb       	out	0x11, r22	; 17
				return NO_ERRORS; // no errors
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	08 95       	ret
			return INVALID_PIN_DIRECTION;
		}
		return PIN_NUMBER_OUT_OF_RANGE; // pin_number or direction are out of range
			

	default: return INVALID_PORT_ID; // GPIO Id isn't defined
 22a:	8d ef       	ldi	r24, 0xFD	; 253
 22c:	08 95       	ret
					PORTA_DDR |= (direction<< pin_number);
					return NO_ERRORS; // no errors
				}
				return INVALID_PIN_DIRECTION;
			}
		return PIN_NUMBER_OUT_OF_RANGE; 
 22e:	8e ef       	ldi	r24, 0xFE	; 254
 230:	08 95       	ret
				if (direction <= 1)
				{
					PORTA_DDR |= (direction<< pin_number);
					return NO_ERRORS; // no errors
				}
				return INVALID_PIN_DIRECTION;
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	08 95       	ret
					PORTB_DDR |= (direction<< pin_number);
					return NO_ERRORS; // no errors
				}
				return INVALID_PIN_DIRECTION;
			}
			return PIN_NUMBER_OUT_OF_RANGE; // Error
 236:	8e ef       	ldi	r24, 0xFE	; 254
 238:	08 95       	ret
				if (direction <= 1)
				{
					PORTB_DDR |= (direction<< pin_number);
					return NO_ERRORS; // no errors
				}
				return INVALID_PIN_DIRECTION;
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	08 95       	ret
					PORTC_DDR |= (direction<< pin_number);
					return NO_ERRORS; // no errors
				}
				return INVALID_PIN_DIRECTION;
			}
			return PIN_NUMBER_OUT_OF_RANGE; // Error
 23e:	8e ef       	ldi	r24, 0xFE	; 254
 240:	08 95       	ret
				if (direction <= 1)
				{
					PORTC_DDR |= (direction<< pin_number);
					return NO_ERRORS; // no errors
				}
				return INVALID_PIN_DIRECTION;
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	08 95       	ret
				PORTD_DDR |= (direction<< pin_number);
				return NO_ERRORS; // no errors
			}
			return INVALID_PIN_DIRECTION;
		}
		return PIN_NUMBER_OUT_OF_RANGE; // pin_number or direction are out of range
 246:	8e ef       	ldi	r24, 0xFE	; 254
 248:	08 95       	ret
			if (direction <= 1)
			{
				PORTD_DDR |= (direction<< pin_number);
				return NO_ERRORS; // no errors
			}
			return INVALID_PIN_DIRECTION;
 24a:	8f ef       	ldi	r24, 0xFF	; 255
		return PIN_NUMBER_OUT_OF_RANGE; // pin_number or direction are out of range
			

	default: return INVALID_PORT_ID; // GPIO Id isn't defined
	}
}
 24c:	08 95       	ret

0000024e <DIO_setPinValue>:



sint8_t DIO_setPinValue(uint8_t GPIO, uint8_t pin_number, uint8_t value)
{
	switch (GPIO)
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	41 f1       	breq	.+80     	; 0x2a2 <DIO_setPinValue+0x54>
 252:	38 f0       	brcs	.+14     	; 0x262 <DIO_setPinValue+0x14>
 254:	82 30       	cpi	r24, 0x02	; 2
 256:	09 f4       	brne	.+2      	; 0x25a <DIO_setPinValue+0xc>
 258:	44 c0       	rjmp	.+136    	; 0x2e2 <DIO_setPinValue+0x94>
 25a:	83 30       	cpi	r24, 0x03	; 3
 25c:	09 f4       	brne	.+2      	; 0x260 <DIO_setPinValue+0x12>
 25e:	61 c0       	rjmp	.+194    	; 0x322 <DIO_setPinValue+0xd4>
 260:	7f c0       	rjmp	.+254    	; 0x360 <DIO_setPinValue+0x112>
	{
		case GPIOA:
		if (pin_number < 7)
 262:	67 30       	cpi	r22, 0x07	; 7
 264:	08 f0       	brcs	.+2      	; 0x268 <DIO_setPinValue+0x1a>
 266:	7e c0       	rjmp	.+252    	; 0x364 <DIO_setPinValue+0x116>
		{
			if (GET_BIT(value, 0) == LOW)
 268:	40 fd       	sbrc	r20, 0
 26a:	0e c0       	rjmp	.+28     	; 0x288 <DIO_setPinValue+0x3a>
			{
				CLR_BIT(PORTA_DATA, pin_number);
 26c:	2b b3       	in	r18, 0x1b	; 27
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	ac 01       	movw	r20, r24
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_setPinValue+0x2c>
 276:	44 0f       	add	r20, r20
 278:	55 1f       	adc	r21, r21
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_setPinValue+0x28>
 27e:	ba 01       	movw	r22, r20
 280:	60 95       	com	r22
 282:	62 23       	and	r22, r18
 284:	6b bb       	out	0x1b, r22	; 27
 286:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTA_DATA, pin_number);
 288:	2b b3       	in	r18, 0x1b	; 27
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	ac 01       	movw	r20, r24
 290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_setPinValue+0x48>
 292:	44 0f       	add	r20, r20
 294:	55 1f       	adc	r21, r21
 296:	6a 95       	dec	r22
 298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_setPinValue+0x44>
 29a:	ba 01       	movw	r22, r20
 29c:	62 2b       	or	r22, r18
 29e:	6b bb       	out	0x1b, r22	; 27
 2a0:	08 95       	ret
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error


		case GPIOB:
		if (pin_number < 7)
 2a2:	67 30       	cpi	r22, 0x07	; 7
 2a4:	08 f0       	brcs	.+2      	; 0x2a8 <DIO_setPinValue+0x5a>
 2a6:	60 c0       	rjmp	.+192    	; 0x368 <DIO_setPinValue+0x11a>
		{
			if (GET_BIT(value, 0) == LOW)
 2a8:	40 fd       	sbrc	r20, 0
 2aa:	0e c0       	rjmp	.+28     	; 0x2c8 <DIO_setPinValue+0x7a>
			{
				CLR_BIT(PORTB_DATA, pin_number);
 2ac:	28 b3       	in	r18, 0x18	; 24
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	ac 01       	movw	r20, r24
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_setPinValue+0x6c>
 2b6:	44 0f       	add	r20, r20
 2b8:	55 1f       	adc	r21, r21
 2ba:	6a 95       	dec	r22
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_setPinValue+0x68>
 2be:	ba 01       	movw	r22, r20
 2c0:	60 95       	com	r22
 2c2:	62 23       	and	r22, r18
 2c4:	68 bb       	out	0x18, r22	; 24
 2c6:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTB_DATA, pin_number);
 2c8:	28 b3       	in	r18, 0x18	; 24
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	ac 01       	movw	r20, r24
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_setPinValue+0x88>
 2d2:	44 0f       	add	r20, r20
 2d4:	55 1f       	adc	r21, r21
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_setPinValue+0x84>
 2da:	ba 01       	movw	r22, r20
 2dc:	62 2b       	or	r22, r18
 2de:	68 bb       	out	0x18, r22	; 24
 2e0:	08 95       	ret
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error

		
		case GPIOC:
		if (pin_number < 7)
 2e2:	67 30       	cpi	r22, 0x07	; 7
 2e4:	08 f0       	brcs	.+2      	; 0x2e8 <DIO_setPinValue+0x9a>
 2e6:	42 c0       	rjmp	.+132    	; 0x36c <DIO_setPinValue+0x11e>
		{
			if (GET_BIT(value, 0) == LOW)
 2e8:	40 fd       	sbrc	r20, 0
 2ea:	0e c0       	rjmp	.+28     	; 0x308 <DIO_setPinValue+0xba>
			{
				CLR_BIT(PORTC_DATA, pin_number);
 2ec:	25 b3       	in	r18, 0x15	; 21
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	ac 01       	movw	r20, r24
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_setPinValue+0xac>
 2f6:	44 0f       	add	r20, r20
 2f8:	55 1f       	adc	r21, r21
 2fa:	6a 95       	dec	r22
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_setPinValue+0xa8>
 2fe:	ba 01       	movw	r22, r20
 300:	60 95       	com	r22
 302:	62 23       	and	r22, r18
 304:	65 bb       	out	0x15, r22	; 21
 306:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTC_DATA, pin_number);
 308:	25 b3       	in	r18, 0x15	; 21
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	ac 01       	movw	r20, r24
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_setPinValue+0xc8>
 312:	44 0f       	add	r20, r20
 314:	55 1f       	adc	r21, r21
 316:	6a 95       	dec	r22
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_setPinValue+0xc4>
 31a:	ba 01       	movw	r22, r20
 31c:	62 2b       	or	r22, r18
 31e:	65 bb       	out	0x15, r22	; 21
 320:	08 95       	ret
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error

		
		case GPIOD:
		if (pin_number < 7)
 322:	67 30       	cpi	r22, 0x07	; 7
 324:	28 f5       	brcc	.+74     	; 0x370 <DIO_setPinValue+0x122>
		{
			if (GET_BIT(value, 0) == LOW)
 326:	40 fd       	sbrc	r20, 0
 328:	0e c0       	rjmp	.+28     	; 0x346 <DIO_setPinValue+0xf8>
			{
				CLR_BIT(PORTD_DATA, pin_number);
 32a:	22 b3       	in	r18, 0x12	; 18
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	ac 01       	movw	r20, r24
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_setPinValue+0xea>
 334:	44 0f       	add	r20, r20
 336:	55 1f       	adc	r21, r21
 338:	6a 95       	dec	r22
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_setPinValue+0xe6>
 33c:	ba 01       	movw	r22, r20
 33e:	60 95       	com	r22
 340:	62 23       	and	r22, r18
 342:	62 bb       	out	0x12, r22	; 18
 344:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTD_DATA, pin_number);
 346:	22 b3       	in	r18, 0x12	; 18
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	ac 01       	movw	r20, r24
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_setPinValue+0x106>
 350:	44 0f       	add	r20, r20
 352:	55 1f       	adc	r21, r21
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_setPinValue+0x102>
 358:	ba 01       	movw	r22, r20
 35a:	62 2b       	or	r22, r18
 35c:	62 bb       	out	0x12, r22	; 18
 35e:	08 95       	ret
			return NO_ERRORS; // no errors
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error


		default: return INVALID_PORT_ID; // GPIO Id isn't defined
 360:	8d ef       	ldi	r24, 0xFD	; 253
 362:	08 95       	ret
			{
				SET_BIT(PORTA_DATA, pin_number);
			}
			return NO_ERRORS; // no errors
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error
 364:	8e ef       	ldi	r24, 0xFE	; 254
 366:	08 95       	ret
			{
				SET_BIT(PORTB_DATA, pin_number);
			}
			return NO_ERRORS; // no errors
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error
 368:	8e ef       	ldi	r24, 0xFE	; 254
 36a:	08 95       	ret
			{
				SET_BIT(PORTC_DATA, pin_number);
			}
			return NO_ERRORS; 
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error
 36c:	8e ef       	ldi	r24, 0xFE	; 254
 36e:	08 95       	ret
			{
				SET_BIT(PORTD_DATA, pin_number);
			}
			return NO_ERRORS; // no errors
		}
		return PIN_NUMBER_OUT_OF_RANGE; // Error
 370:	8e ef       	ldi	r24, 0xFE	; 254


		default: return INVALID_PORT_ID; // GPIO Id isn't defined
	}
}
 372:	08 95       	ret

00000374 <LED_Init>:
#include "LED_config.h"


void LED_Init(uint8_t copy_u8Port , uint8_t copy_u8Pin)
{
	DIO_setPinDirection(copy_u8Port ,copy_u8Pin, OUTPUT );	
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_setPinDirection>
 37a:	08 95       	ret

0000037c <LED_TurnOn>:
}


void LED_TurnOn(uint8_t copy_u8Port , uint8_t copy_u8Pin)
{
	DIO_setPinValue( copy_u8Port , copy_u8Pin , HIGH );
 37c:	41 e0       	ldi	r20, 0x01	; 1
 37e:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_setPinValue>
 382:	08 95       	ret

00000384 <LED_TurnOff>:
}


void LED_TurnOff(uint8_t copy_u8Port , uint8_t copy_u8Pin)
{
     DIO_setPinValue(copy_u8Port , copy_u8Pin , LOW );
 384:	40 e0       	ldi	r20, 0x00	; 0
 386:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_setPinValue>
 38a:	08 95       	ret

0000038c <main>:

#include "App.h"


int main(void)
{
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	00 d0       	rcall	.+0      	; 0x392 <main+0x6>
 392:	00 d0       	rcall	.+0      	; 0x394 <main+0x8>
 394:	00 d0       	rcall	.+0      	; 0x396 <main+0xa>
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
	App_Init();
 39a:	0e 94 41 00 	call	0x82	; 0x82 <App_Init>
    while(1)
    {
		sint8_t cmd[6] = {0};
 39e:	0f 2e       	mov	r0, r31
 3a0:	f6 e0       	ldi	r31, 0x06	; 6
 3a2:	ff 2e       	mov	r15, r31
 3a4:	f0 2d       	mov	r31, r0
 3a6:	8e 01       	movw	r16, r28
 3a8:	0f 5f       	subi	r16, 0xFF	; 255
 3aa:	1f 4f       	sbci	r17, 0xFF	; 255
 3ac:	f8 01       	movw	r30, r16
 3ae:	8f 2d       	mov	r24, r15
 3b0:	11 92       	st	Z+, r1
 3b2:	8a 95       	dec	r24
 3b4:	e9 f7       	brne	.-6      	; 0x3b0 <main+0x24>
		uint8_t cmd_id = App_ReceiveCommand(cmd);
 3b6:	c8 01       	movw	r24, r16
 3b8:	0e 94 57 00 	call	0xae	; 0xae <App_ReceiveCommand>
		App_TakeAction(cmd_id);
 3bc:	0e 94 8e 00 	call	0x11c	; 0x11c <App_TakeAction>
 3c0:	f5 cf       	rjmp	.-22     	; 0x3ac <main+0x20>

000003c2 <UART_Init>:



void UART_Init(EN_baud_rate BR, EN_stopbit_count SB, EN_parity_mode pm, EN_sync_mode s_mode,
				EN_data_size size, EN_trig_source trig_mode)
{
 3c2:	ef 92       	push	r14
 3c4:	0f 93       	push	r16
	UCSRA = (1<<1); // when disable this mode, data corruption ocurrs
 3c6:	82 e0       	ldi	r24, 0x02	; 2
 3c8:	8b b9       	out	0x0b, r24	; 11
	
	UCSRB = trig_mode ;
 3ca:	ea b8       	out	0x0a, r14	; 10
	ENABLE_TRANSMITTER();
 3cc:	53 9a       	sbi	0x0a, 3	; 10
	ENABLE_RECEIVER();
 3ce:	54 9a       	sbi	0x0a, 4	; 10
	
	UCSRC = (1<<7);
 3d0:	80 e8       	ldi	r24, 0x80	; 128
 3d2:	80 bd       	out	0x20, r24	; 32
	UCSRC |= ( SB | pm | s_mode | size );
 3d4:	80 b5       	in	r24, 0x20	; 32
 3d6:	08 2b       	or	r16, r24
 3d8:	20 2b       	or	r18, r16
 3da:	42 2b       	or	r20, r18
 3dc:	64 2b       	or	r22, r20
 3de:	60 bd       	out	0x20, r22	; 32
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
 3e0:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE;
 3e2:	8c e0       	ldi	r24, 0x0C	; 12
 3e4:	89 b9       	out	0x09, r24	; 9
	
}
 3e6:	0f 91       	pop	r16
 3e8:	ef 90       	pop	r14
 3ea:	08 95       	ret

000003ec <UART_SendChar>:


void UART_SendChar(uint8_t character)
{
	// wait until UDRE flag is enabled (ready to transmit data)
	while(!GET_BIT(UCSRA,5));
 3ec:	5d 9b       	sbis	0x0b, 5	; 11
 3ee:	fe cf       	rjmp	.-4      	; 0x3ec <UART_SendChar>
	UDR = character;
 3f0:	8c b9       	out	0x0c, r24	; 12
 3f2:	08 95       	ret

000003f4 <UART_SendString>:
}


void UART_SendString(uint8_t *data)
{
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
 3f8:	ec 01       	movw	r28, r24
	uint16_t index = 0;
	while(data[index] != '\0')
 3fa:	88 81       	ld	r24, Y
 3fc:	88 23       	and	r24, r24
 3fe:	31 f0       	breq	.+12     	; 0x40c <UART_SendString+0x18>
 400:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(data[index]);
 402:	0e 94 f6 01 	call	0x3ec	; 0x3ec <UART_SendChar>


void UART_SendString(uint8_t *data)
{
	uint16_t index = 0;
	while(data[index] != '\0')
 406:	89 91       	ld	r24, Y+
 408:	81 11       	cpse	r24, r1
 40a:	fb cf       	rjmp	.-10     	; 0x402 <UART_SendString+0xe>
	{
		UART_SendChar(data[index]);
		index++;
	}
}
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	08 95       	ret

00000412 <UART_ReceiveCharSych>:
	*receive_buffer = UDR;
}

uint8_t UART_ReceiveCharSych(void)
{
	while(!GET_BIT(UCSRA,7));
 412:	5f 9b       	sbis	0x0b, 7	; 11
 414:	fe cf       	rjmp	.-4      	; 0x412 <UART_ReceiveCharSych>
	return UDR;
 416:	8c b1       	in	r24, 0x0c	; 12
}
 418:	08 95       	ret

0000041a <UART_ReceiveString>:
	}
}


void UART_ReceiveString(uint8_t *receive_buffer)
{
 41a:	ff 92       	push	r15
 41c:	0f 93       	push	r16
 41e:	1f 93       	push	r17
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	ec 01       	movw	r28, r24
	uint8_t index = 0;
 426:	f1 2c       	mov	r15, r1
	do 
	{
		receive_buffer[index] = UART_ReceiveCharSych();
 428:	8e 01       	movw	r16, r28
 42a:	0f 0d       	add	r16, r15
 42c:	11 1d       	adc	r17, r1
 42e:	0e 94 09 02 	call	0x412	; 0x412 <UART_ReceiveCharSych>
 432:	f8 01       	movw	r30, r16
 434:	80 83       	st	Z, r24
		index++;
 436:	f3 94       	inc	r15
	} while (receive_buffer[index-1] != '\r');
 438:	ef 2d       	mov	r30, r15
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	31 97       	sbiw	r30, 0x01	; 1
 43e:	ec 0f       	add	r30, r28
 440:	fd 1f       	adc	r31, r29
 442:	80 81       	ld	r24, Z
 444:	8d 30       	cpi	r24, 0x0D	; 13
 446:	81 f7       	brne	.-32     	; 0x428 <UART_ReceiveString+0xe>
	receive_buffer[index-1] = '\0';
 448:	10 82       	st	Z, r1
}
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	1f 91       	pop	r17
 450:	0f 91       	pop	r16
 452:	ff 90       	pop	r15
 454:	08 95       	ret

00000456 <UARTif_Init>:

#include "UART _interface.h"
#include "UARTif.h"

void UARTif_Init(uint8_t Uart_Id)
{
 456:	ef 92       	push	r14
 458:	0f 93       	push	r16
	switch (Uart_Id)
 45a:	81 11       	cpse	r24, r1
 45c:	08 c0       	rjmp	.+16     	; 0x46e <UARTif_Init+0x18>
	{
		case 0:
			UART_Init(BR_9600,_1_stopbit,disabled,Asynchronous,_8_bits,polling);
 45e:	e1 2c       	mov	r14, r1
 460:	06 e0       	ldi	r16, 0x06	; 6
 462:	20 e0       	ldi	r18, 0x00	; 0
 464:	40 e0       	ldi	r20, 0x00	; 0
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	86 e0       	ldi	r24, 0x06	; 6
 46a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <UART_Init>
			break;
	}
}
 46e:	0f 91       	pop	r16
 470:	ef 90       	pop	r14
 472:	08 95       	ret

00000474 <UARTif_SendStr>:

void UARTif_SendStr(uint8_t Uart_Id, uint8_t* str)
{
	switch (Uart_Id)
 474:	81 11       	cpse	r24, r1
 476:	03 c0       	rjmp	.+6      	; 0x47e <UARTif_SendStr+0xa>
	{
		case 0:
			UART_SendString(str);
 478:	cb 01       	movw	r24, r22
 47a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <UART_SendString>
 47e:	08 95       	ret

00000480 <UARTif_ReceiveStr>:
	}
}

void UARTif_ReceiveStr(uint8_t Uart_id, uint8_t* buffer)
{
	switch (Uart_id)
 480:	81 11       	cpse	r24, r1
 482:	03 c0       	rjmp	.+6      	; 0x48a <UARTif_ReceiveStr+0xa>
	{
		case 0:
		UART_ReceiveString(buffer);
 484:	cb 01       	movw	r24, r22
 486:	0e 94 0d 02 	call	0x41a	; 0x41a <UART_ReceiveString>
 48a:	08 95       	ret

0000048c <strncmp>:
 48c:	fb 01       	movw	r30, r22
 48e:	dc 01       	movw	r26, r24
 490:	41 50       	subi	r20, 0x01	; 1
 492:	50 40       	sbci	r21, 0x00	; 0
 494:	30 f0       	brcs	.+12     	; 0x4a2 <strncmp+0x16>
 496:	8d 91       	ld	r24, X+
 498:	01 90       	ld	r0, Z+
 49a:	80 19       	sub	r24, r0
 49c:	19 f4       	brne	.+6      	; 0x4a4 <strncmp+0x18>
 49e:	00 20       	and	r0, r0
 4a0:	b9 f7       	brne	.-18     	; 0x490 <strncmp+0x4>
 4a2:	88 1b       	sub	r24, r24
 4a4:	99 0b       	sbc	r25, r25
 4a6:	08 95       	ret

000004a8 <_exit>:
 4a8:	f8 94       	cli

000004aa <__stop_program>:
 4aa:	ff cf       	rjmp	.-2      	; 0x4aa <__stop_program>
