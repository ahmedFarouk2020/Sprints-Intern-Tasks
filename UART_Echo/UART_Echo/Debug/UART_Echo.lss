
UART_Echo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000060  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000004a9  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001df  00000000  00000000  00000651  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000012c  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000bc  00000000  00000000  0000095c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000002eb  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000261  00000000  00000000  00000d03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000040  00000000  00000000  00000f64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:



int main(void)
{
	UART_Init(BR_9600,_1_stopbit,even_parity,Asynchronous,_8_bits,polling);
  6c:	e1 2c       	mov	r14, r1
  6e:	06 e0       	ldi	r16, 0x06	; 6
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	40 e2       	ldi	r20, 0x20	; 32
  74:	60 e0       	ldi	r22, 0x00	; 0
  76:	86 e0       	ldi	r24, 0x06	; 6
  78:	0e 94 43 00 	call	0x86	; 0x86 <UART_Init>
	while(1)
	{
		uint8_t character = UART_ReceiveCharSych();
  7c:	0e 94 5c 00 	call	0xb8	; 0xb8 <UART_ReceiveCharSych>
		UART_SendChar(character);
  80:	0e 94 58 00 	call	0xb0	; 0xb0 <UART_SendChar>
  84:	fb cf       	rjmp	.-10     	; 0x7c <main+0x10>

00000086 <UART_Init>:



void UART_Init(EN_baud_rate BR, EN_stopbit_count SB, EN_parity_mode pm, EN_sync_mode s_mode,
				EN_data_size size, EN_trig_source trig_mode)
{
  86:	ef 92       	push	r14
  88:	0f 93       	push	r16
	UCSRA = (1<<1); // when disable this mode, data corruption ocurrs
  8a:	82 e0       	ldi	r24, 0x02	; 2
  8c:	8b b9       	out	0x0b, r24	; 11
	
	UCSRB = trig_mode ;
  8e:	ea b8       	out	0x0a, r14	; 10
	ENABLE_TRANSMITTER();
  90:	53 9a       	sbi	0x0a, 3	; 10
	ENABLE_RECEIVER();
  92:	54 9a       	sbi	0x0a, 4	; 10
	
	UCSRC = (1<<7);
  94:	80 e8       	ldi	r24, 0x80	; 128
  96:	80 bd       	out	0x20, r24	; 32
	UCSRC |= ( SB | pm | s_mode | size );
  98:	80 b5       	in	r24, 0x20	; 32
  9a:	08 2b       	or	r16, r24
  9c:	20 2b       	or	r18, r16
  9e:	42 2b       	or	r20, r18
  a0:	64 2b       	or	r22, r20
  a2:	60 bd       	out	0x20, r22	; 32
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
  a4:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE;
  a6:	8c e0       	ldi	r24, 0x0C	; 12
  a8:	89 b9       	out	0x09, r24	; 9
	
}
  aa:	0f 91       	pop	r16
  ac:	ef 90       	pop	r14
  ae:	08 95       	ret

000000b0 <UART_SendChar>:


void UART_SendChar(uint8_t character)
{
	// wait until UDRE flag is enabled (ready to transmit data)
	while(!GET_BIT(UCSRA,5));
  b0:	5d 9b       	sbis	0x0b, 5	; 11
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <UART_SendChar>
	UDR = character;
  b4:	8c b9       	out	0x0c, r24	; 12
  b6:	08 95       	ret

000000b8 <UART_ReceiveCharSych>:
	*receive_buffer = UDR;
}

uint8_t UART_ReceiveCharSych(void)
{
	while(!GET_BIT(UCSRA,7));
  b8:	5f 9b       	sbis	0x0b, 7	; 11
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <UART_ReceiveCharSych>
	return UDR;
  bc:	8c b1       	in	r24, 0x0c	; 12
}
  be:	08 95       	ret

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
